[tool.ruff]
# Exclude commonly ignored directories
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "logs",
    "generated",
    "output",
]

# Python version target
target-version = "py39"

# Line length (matching Black's default)
line-length = 120

# Allow some flexibility for complex code
indent-width = 4

[tool.ruff.lint]
# Enable specific rule categories
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # bugbear
    "C4",   # comprehensions
    "UP",   # pyupgrade
    "SIM",  # simplify
    "RUF",  # ruff-specific rules
    "G",    # logging format
    "C90",  # mccabe complexity
    "PLC",  # pylint convention
    "PLE",  # pylint error
    "PLR",  # pylint refactor
    "PLW",  # pylint warning
    "PERF", # performance
    "FA",   # future annotations
]

# Ignore specific rules that are too strict for this project
ignore = [
    "E501",     # Line too long (handled by formatter)
    "T201",     # Print statements (needed for IPC communication)
    "T203",     # pprint (sometimes useful for debugging)
    "S101",     # Assert statements (useful for development)
    "BLE001",   # Blind except (sometimes necessary for resilience)
    "G004",     # Logging f-strings (cleaner than %)
    "PLR2004",  # Magic values (sometimes clearer inline)
    "PLR0913",  # Too many arguments
    "PLR0912",  # Too many branches
    "PLR0915",  # Too many statements
    "C901",     # Complex structure
    "D",        # Documentation (separate concern)
    # "ANN",      # Annotations now enforced!
    "DTZ",      # Datetime timezone (not always needed)
    "TRY003",   # Long exception messages
    "EM101",    # Exception message in f-string
    "EM102",    # Exception message in f-string
    "RUF001",   # String contains ambiguous character
    "RUF002",   # Docstring contains ambiguous character
    "RUF003",   # Comment contains ambiguous character
]

# Allow autofix for safe fixes
fixable = ["ALL"]
unfixable = []

# Allow unused variables when prefixed with an underscore
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Use double quotes for strings
quote-style = "double"

# Indent with spaces
indent-style = "space"

# Unix-style line endings
line-ending = "auto"

# Magic trailing comma
skip-magic-trailing-comma = false

[tool.ruff.lint.isort]
# Group imports
combine-as-imports = true
split-on-trailing-comma = true
# Add blank lines between import sections
lines-between-types = 1
# Force consistent import sections
force-single-line = false
# Import sections order
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]
# Define first-party packages (your local modules)
known-first-party = ["constants", "logger", "utils", "functions", "models", "sdk_models", "main", "tool_patch", "session", "sdk_token_tracker"]

[tool.ruff.lint.mccabe]
# Maximum complexity
max-complexity = 15

[tool.ruff.lint.pylint]
# Maximum number of arguments
max-args = 8
max-branches = 15
max-returns = 6
max-statements = 50

[tool.ruff.lint.per-file-ignores]
# Test files can have more relaxed rules
"tests/**/*.py" = ["S101", "PLR2004", "PLR0913"]

# Main.py needs prints for IPC and has cleanup loops
"src/main.py" = ["T201", "PERF203"]

[tool.mypy]
# Specify the Python version
python_version = "3.13"

# Discover Python files in the src directory
files = ["src/"]

# Strict mode options (gradually enable these)
strict = true  # Enforce comprehensive type checking
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# Error output settings
pretty = true
show_error_codes = true
show_error_context = true
show_column_numbers = true

# Import discovery
ignore_missing_imports = true  # External libs without stubs
follow_imports = "normal"
namespace_packages = true

# Incremental type checking
incremental = true
cache_dir = ".mypy_cache"

# Disallow dynamic typing (strict enforcement)
disallow_untyped_calls = true  # Enforce type annotations
disallow_untyped_defs = true   # All functions must be typed
disallow_incomplete_defs = true # Complete type coverage required
disallow_untyped_decorators = false
check_untyped_defs = true

# None handling
no_implicit_optional = true
strict_optional = true

# Per-module options (for gradual adoption)
[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "agents.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "openai.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "markitdown.*"
ignore_missing_imports = true

[tool.black]
line-length = 120
target-version = ['py39']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.mypy_cache
  | \.ruff_cache
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | node_modules
)/
'''
